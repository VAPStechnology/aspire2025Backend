#!/usr/bin/env node

import app from '../app.js';
import http from 'http';
import net from 'net'; // Required for checking if a port is in use

let port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

const server = http.createServer(app);

// Start server listening
server.listen(port, () => {
  console.log(`🚀 Server is running on http://localhost:${port}`);
});

// Handle 'EADDRINUSE' error and try the next available port
server.on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.warn(`⚠️ Port ${port} is in use. Trying next available port...`);
    findAvailablePort(port)
      .then((availablePort) => {
        port = availablePort;
        app.set('port', port);
        server.close(() => { // Close the server before reopening it on the new port
          console.log(`Server on port ${port - 1} closed.`);
          server.listen(port);
        });
      })
      .catch((error) => {
        console.error('❌ Error finding available port:', error);
        process.exit(1);
      });
  } else {
    console.error(`❌ Server error: ${err.message}`);
    process.exit(1);
  }
});

// Function to normalize the port value
function normalizePort(val) {
  const portNum = parseInt(val, 10);
  if (isNaN(portNum)) return val;
  if (portNum >= 0) return portNum;
  return false;
}

// Function to find the next available port
function findAvailablePort(currentPort) {
  return new Promise((resolve, reject) => {
    const MAX_TRIES = 10; // Limit the number of attempts to find an available port
    let attempts = 0;

    const checkPort = (port) => {
      const server = net.createServer().listen(port);

      server.on('listening', () => {
        server.close();
        resolve(port); // Found an available port
      });

      server.on('error', (err) => {
        if (err.code === 'EADDRINUSE' && attempts < MAX_TRIES) {
          attempts++;
          checkPort(port + 1); // Try the next port
        } else if (attempts >= MAX_TRIES) {
          reject(new Error('No available ports found within the limit.'));
        } else {
          reject(err);
        }
      });
    };

    checkPort(currentPort); // Start checking from the given port
  });
}
